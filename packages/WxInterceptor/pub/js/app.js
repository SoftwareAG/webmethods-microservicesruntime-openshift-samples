var wxInterceptorModule = angular.module('wxInterceptorModule', ['ui.bootstrap', 'smart-table', 'ngResource', 'ngAnimate', 'ngRoute', 'toaster','treeControl']);// configure our routeswxInterceptorModule.config(function($routeProvider) {	$routeProvider		.when('/', {			templateUrl : 'wxinterceptor.html',			controller  : 'WxMainCtrl'		})		.when('/mrt/', {			templateUrl : 'mrt.html',			controller  : 'MrtCtrl'		})		.when('/mrt_statistics/', {			templateUrl : 'mrtStatistics.html',			controller  : 'MrtStatisticsCtrl'		})		.when('/mrt_graph/', {			templateUrl : 'mrtGraph.html',			controller  : 'MrtGraphCtrl'		})});var WxMainCtrl = function($scope, $location, toaster) {	$scope.message = 'WxInterceptor Main Controller';    $scope.isActive = function (viewLocation) {         return viewLocation === $location.path();	};};wxInterceptorModule.controller("WxMainCtrl", WxMainCtrl);wxInterceptorModule.factory('InterceptorResource', function($resource) {	var InterceptorResource = $resource( '/rest/wx/interceptor/restServices/config/interceptor/:urlSuffix/:interceptorId', 			{ interceptorId: '@interceptorId' }, { 				save: { 					method: 'POST', 					isArray: false				}, 				get: { 					method: 'GET', 					isArray: false				}, 				query: { 					method: 'GET', 					isArray: false				},				toogle: {					params: {urlSuffix:'toggle'},					method: 'PUT',					isArray: false				},				addPredefined: {					params: {urlSuffix:'predefined'},					method: 'PUT',					isArray: false				}			} );				return InterceptorResource;});wxInterceptorModule.factory('WxInterceptorResource', function($resource) {	var WxInterceptorResource = $resource( '/rest/wx/interceptor/restServices/config/registerInvokeChainProcessor', 			{}, { 				get: { 					method: 'GET', 					isArray: false				}, 				put: { 					method: 'PUT', 					isArray: false				},				delete: {					method: 'DELETE',					isArray: false				}			} );				return WxInterceptorResource;});wxInterceptorModule.service('WxInterceptorModel', function(WxInterceptorResource, toaster) {	var WxInterceptor =  function() {		this.state = {			started: false,			text: "disabled" };				this.setStatus = function(isEnabled) {			if( isEnabled ) {				this.state.started = true;				this.state.text = "enabled";			} else {				this.state.started = false;				this.state.text = "disabled";						}		};	};		WxInterceptor.prototype.checkStatus = function () {		var self = this;		WxInterceptorResource.get({}, {}, function(successData) {			console.log("checkWxInterceptorStatus response isRegistered: " + successData.isRegistered);			toaster.pop("success", "checkWxInterceptorStatus response isRegistered: " + successData.isRegistered);			if( successData.isRegistered == "true" ) {				self.setStatus(true);			} else {				self.setStatus(false);			}		}, function(errorData) {			toaster.pop("error", "checkWxInterceptorStatus error response isRegistered: " + errorData);		});	};		WxInterceptor.prototype.startStopWxInterceptor = function() {		var self = this;        console.log('startStopWxInterceptor1: checkModel.started', self.state.started + ' ' + self.state.text);		if( self.state.started == true ) {			disableWxInterceptor(self);		} else {			enableWxInterceptor(self);		}	};			var enableWxInterceptor = function(wxInterceptor) {        console.log('enableWxInterceptor was called');        WxInterceptorResource.put({},{}, function(successData) {        	console.log('enableWxInterceptor data: ' + successData.success + " " + successData.msg);        	if( successData.success == "true" ) {        		wxInterceptor.setStatus(true);        		toaster.pop("success", "WxInterceptor was successfully enabled.");        	} else {        		console.log('error enableWxInterceptor data: ' + successData.success + " " + successData.msg);        		toaster.pop("error", "WxInterceptor error when enabling: " + successData.msg);        	}        }, function(errorData) {        	console.log('error enableWxInterceptor data: ' + errorData.success + " " + errorData.msg);        	toaster.pop("error", "WxInterceptor error when enabling: " + errorData.msg);        });	};		var disableWxInterceptor = function(wxInterceptor) {        console.log('disableWxInterceptor was called');                WxInterceptorResource.delete({},{}, function(successData) {        	console.log('disableWxInterceptor data: ' + successData.success + " " + successData.msg);        	if( successData.success == "true" ) {        		wxInterceptor.setStatus(false);        		toaster.pop("success", "WxInterceptor was successfully disabled.");        	} else {        		console.log('error disableWxInterceptor data: ' + successData.success + " " + successData.msg);        		toaster.pop("error", "WxInterceptor error when disabling: " + successData.msg);        	}        }, function(errorData) {        	console.log('error disableWxInterceptor data: ' + errorData.success + " " + errorData.msg);        	toaster.pop("error", "WxInterceptor error when disabling: " + errorData.msg);        });        	};		return new WxInterceptor();});var WxInterceptorsCtrl = function($scope, WxInterceptorModel, toaster) {	checkState();		$scope.WxInterceptorModel = WxInterceptorModel;		function checkState() {		WxInterceptorModel.checkStatus();	};		$scope.startStopWxInterceptor = function() {		WxInterceptorModel.startStopWxInterceptor();	};};wxInterceptorModule.controller("WxInterceptorsCtrl", WxInterceptorsCtrl);wxInterceptorModule.service('InterceptorModel', function(InterceptorResource, toaster) {		var Interceptors = function() {		this.data =	[{				id: -1,				serviceFqn: "",				active: true,				preList: [{"fqn":""}],				postList: [{"fqn":""}]		}];	};		Interceptors.prototype.load = function() {		var self = this;		InterceptorResource.query({}, {}, function(successData) {			self.data = successData.data.interceptorList;			console.log("loadData response data " + successData.data);			toaster.pop("success", "Successfully loaded Interceptor data.");		}, function(errorData) {			console.log("loadData response data " + errorData.data);			toaster.pop("error", "Error when loading interceptor data: " + errorData.status.msg);		});	};		Interceptors.prototype.deleteInterceptor = function(id) {		var self = this;		InterceptorResource.delete({interceptorId:id}, {}, function(successData) {			toaster.pop('success', 'Delete Interceptor', 'Interceptor ' + id + ' was deleted successfully.');			console.log("loadData response data " + successData.data);			self.load();		}, function(errorData) {			console.log("removeInterceptor response data " + errorData.status.success);			toaster.pop('error', 'Delete Interceptor', 'Error when deleting Interceptor ' + id + ': ' + errorData.status.msg);		});	};		Interceptors.prototype.toggleInterceptorState = function(id) {		var self = this;		InterceptorResource.toogle({interceptorId:id}, 				{}, function(successData) {			console.log("toggleInterceptor response data " + successData.status.success);			self.load();			toaster.pop('success', 'Toggle Interceptor', 'Interceptor ' + id + ' was toggled.');		}, function(errorData) {			console.log("toggleInterceptor response data " + errorData.status.success);			self.load();			toaster.pop('error', 'Toggle Interceptor', 'Interceptor ' + id + ' wasn\'t toggled. Error: ' + errorData.status.msg);		});	};		Interceptors.prototype.addInterceptor = function(interceptor, callback) {		var self = this;		InterceptorResource.save({},interceptor, function(successData) {			console.log("addInterceptor response data " + successData.status.success);			self.load();			callback();			toaster.pop('success', 'AddInterceptor', 'Interceptor  was added.');		}, function(errorData) {			console.log("addInterceptor response data " + errorData.status.success);			self.load();			toaster.pop('error', 'AddInterceptor', 'Interceptor  wasn\'t added. Error: ' + errorData.status.msg);		});	};		Interceptors.prototype.addPredefinedInterceptor = function(interceptor, predefineServiceType, callbackFnc) {		 var self = this;		 InterceptorResource.addPredefined({serviceFqn: interceptor.serviceFqn, type:predefineServiceType},interceptor, function(successData) {			console.log("addInterceptor response data " + successData.status.success);			self.load();			callbackFnc();			toaster.pop('success', 'AddInterceptor', 'Predefined interceptor with type ' + predefineServiceType + ' was added.');		}, function(errorData) {			console.log("addInterceptor response data " + errorData.status.success);			self.load();			toaster.pop('error', 'AddInterceptor', 'Predefined interceptor  wasn\'t added. Error: ' + errorData.status.msg);		});	};		return new Interceptors();});var InterceptorModalCtrl = function ($scope, $modal) {	  $scope.items = ['item1', 'item2', 'item3'];	  $scope.addInterceptor = function() {		var modalInstance = $modal.open({			templateUrl: 'addInterceptor.html',			controller: AddInterceptorInstanceCtrl,			resolve: {			}		}); 	  };	  	  $scope.open = function (size) {	    var modalInstance = $modal.open({	      templateUrl: 'modal.html',	      controller: ModalInstanceCtrl,	      size: size,	      resolve: {	        items: function () {	          return $scope.items;	        }	      }	    });	    modalInstance.result.then(function (selectedItem) {	      $scope.selected = selectedItem;	    }, function () {	    });	  };};wxInterceptorModule.controller("InterceptorModalCtrl", InterceptorModalCtrl);var AddInterceptorInstanceCtrl = function ($scope, $resource, $modalInstance, InterceptorModel, toaster) {	$scope.addInterceptor = {			interceptor: {				id: -1,				serviceFqn: "",				preList: [{"fqn":""}],				postList: [{"fqn":""}]			}	};			$scope.ok = function (close) {		var success = addInterceptor();		if( close ) {			$modalInstance.close();		}	};		$scope.cancel = function () {		$modalInstance.dismiss('cancel');	};		$scope.addPreService = function() {		$scope.addInterceptor.interceptor.preList.push({"fqn":""});  	};	$scope.removePreService = function(index) {		$scope.addInterceptor.interceptor.preList.splice(index, 1);  	};		$scope.addPostService = function() {		$scope.addInterceptor.interceptor.postList.push({"fqn":""});	};	$scope.removePostService = function(index) {		$scope.addInterceptor.interceptor.postList.splice(index, 1);  	};		var resetInterceptor = function() {		$scope.addInterceptor = {				interceptor: {					id: -1,					serviceFqn: "",					preList: [{"fqn":""}],					postList: [{"fqn":""}]				}		};	}		function addInterceptor() {		InterceptorModel.addInterceptor($scope.addInterceptor, resetInterceptor);	};};var InterceptorsCtrl = function($scope, $http, InterceptorModel, toaster) {	$scope.InterceptorModel = InterceptorModel;		loadData();		$scope.refresh = function() {		loadData();		toaster.pop('info', 'Reloading list of interceptors...');	};		function loadData() {		console.log("loadData is called");		InterceptorModel.load();	};		$scope.remove = function(id) {		InterceptorModel.deleteInterceptor(id);	};		$scope.toggleInterceptorState = function(id) {		InterceptorModel.toggleInterceptorState(id);	};	}wxInterceptorModule.controller("InterceptorsCtrl", InterceptorsCtrl);// Measure Runtime MRTwxInterceptorModule.factory('MrtResource', function($resource) {	var MrtResource = $resource( '/rest/wx/interceptor/restServices/measureRuntimeInMemory/:interceptorId', 			{ interceptorId: '@interceptorId' }, { 				save: { 					method: 'PUT', 					isArray: false				} 			} );				return MrtResource;});wxInterceptorModule.factory('MrtStatisticsResource', function($resource) {	var MrtStatisticsResource = $resource( '/rest/wx/interceptor/restServices/measureRuntimeInMemory/statistics/:interceptorId', 			{ interceptorId: '@interceptorId' }, { 				save: { 					method: 'get', 					isArray: true				} 			} );				return MrtStatisticsResource;});wxInterceptorModule.service('MrtModel', function(MrtResource, MrtStatisticsResource, toaster) {	var Mrt =  function() {		this.data = [{		              serviceFqn: null, 		              statistics: {		            	  min: -1, 		            	  max: -1, 		            	  variance: -1, 		            	  sum: -1,		            	  avg: -1,		            	  stdDev: -1,		            	  invocations: -1}		}];				this.timeunits  = [{"name":"milliseconds", "divider": 1000000},		                   {"name":"microseconds", "divider":  1000},		                   {"name":"nanoseconds", "divider":  1}];		this.selectedTimeunit = 1000000;				this.addMrtService = function(serviceData) {			this.data[this.data.length] = serviceData;		};		this.addMrtServiceFromRest = function(resultData) {			var obj = {					serviceFqn: resultData.serviceName, 					statistics: {						min: resultData.minNano, 						max: resultData.maxNano, 						variance: resultData.varianceNano,						sum: resultData.sumNano,						avg: resultData.avgRuntimeNano,						stdDev: resultData.standardDeviationNano,						invocations: resultData.invocations			}};			this.addMrtService(obj);			return obj;		};	};	Mrt.prototype.getStatistics = function() {		var self = this;		console.log("getting statistics");		MrtStatisticsResource.get({}, {}, function(successData) {			toaster.pop("success", "Successfully reloaded statistics");			self.data = [];			for( var i=0; i<successData.data.statisticList.length; i++ ) {				self.addMrtServiceFromRest(successData.data.statisticList[i]);			}		}, function(errorData) {			toaster.pop("error", "An error occured when getting the statics: " + errorData.status.msg);			console.log("An error occured when getting the statics: " + errorData.status.msg);		});	};	Mrt.prototype.resetStatistics = function() {		var self = this;		console.log("resetting statistics");		MrtStatisticsResource.delete({}, {}, function(successData) {			toaster.pop("success", "Successfully resetted all statistics");			self.data = [];		}, function(errorData) {			toaster.pop("error", "An error occured when resetting the statics: " + errorData.status.msg);			console.log("An error occured when resetting the statics: " + errorData.status.msg);		});	};		Mrt.prototype.getStatisticsForService = function(interceptor, callback, msg) {		var self = this;		console.log("getting statistics for service " + interceptor.toSource());		MrtStatisticsResource.get({serviceFqn: interceptor.serviceFqn}, {}, function(successData) {			// console.log("successData" + successData.toSource() + " " +			// successData.data);			var resultData = successData.data.statisticList[0]; 			if( resultData != null && resultData.serviceName != null ) {				console.log("got statistics for id " + interceptor.id + ": " + resultData);				var obj = self.addMrtServiceFromRest(resultData);				callback(interceptor, obj, msg);				return;			}			console.log("no statistics for id " + interceptor.id);			callback(interceptor, {	              id: interceptor.id, 	              serviceFqn: interceptor.serviceFqn, 	              statistics: {	            	  min: -1, 	            	  max: -1, 	            	  variance: -1, 	            	  sum: -1,	            	  avg: -1,	            	  stdDev: -1,	            	  invocations: -1}			}, "No statistic found for interceptor");		}, function(errorData) {			toaster("error", "An error occured when getting the statics for service with id " + interceptor.id + ": " + errorData.status.msg);			console.log("An error occured when getting the statics for service with id " + interceptor.id + ": " + errorData.status.msg);		});	};		Mrt.prototype.remove = function (id) {		var self = this;		MrtResource.delete({interceptorId:id}, {}, function(successData) {			console.log("remove MRT Service response: " + successData.status);			toaster.pop("success", "Service " + id + " was successfully removed from measurement");		}, function(errorData) {			toaster.pop("error", "Error when removing service from measurement: " + errorData);		});	};		Mrt.prototype.addService = function(interceptor, callback) {		var self = this;		MrtResource.save({}, {interceptor}, function(successData) {			console.log("put MRT Service response: " + successData.status);			callback();			toaster.pop("success", "Service " + id + " was successfully added to measurement");		}, function(errorData) {			toaster.pop("error", "Error when adding service to measurement: " + errorData);		});	};			return new Mrt();});var MrtCtrl = function($scope, MrtModel, InterceptorModel, toaster) {	$scope.MrtModel = MrtModel;	$scope.InterceptorModel = InterceptorModel;		function remove(id) {		MrtModel.remove(id);	};		$scope.filterMrt = function(interceptor) {    	 if( interceptor.preList[0] != null ) {	    	 if (interceptor.preList[0].fqn === "wx.interceptor.pub.interceptors.measureRuntimeInMemory:measureRuntimePre" ) {	    		 return true;	    	 }    	 }    	 return false;	};		$scope.getMrtInterceptorsArr = function(interceptors) {		console.log("filtering for mrt interceptors");		var result = [];	     angular.forEach(interceptors, function(interceptor, key) {	    	 if( interceptor.preList[0] != null ) {		    	 if (interceptor.preList[0].fqn === "wx.interceptor.pub.interceptors.measureRuntimeInMemory:measureRuntimePre" ) {		    		 result.push(interceptor);		    	 }	    	 }	      });	      return result;	};	    // copy the references (you could clone ie angular.copy but then have to go	// through a dirty checking for the matches)    $scope.mrtDataCollection = [].concat($scope.getMrtInterceptorsArr(InterceptorModel.data));        var addMrtToData = function(interceptor, mrt) {    	if( mrt != null ) {    		console.log("returned object " + mrt.toSource());    		interceptor.mrt = mrt;    	} else {    		console.log("no mrt data returned");    	}    	    };	var addMrtToData = function(interceptor, mrt, msg) {		if( mrt != null ) {			console.log("returned object " + mrt.toSource());			interceptor.mrt = mrt;		} else {			console.log("no mrt data returned");		}		if( msg != null ) {			toaster.pop("success", msg);		}			};		$scope.showMrtData = function(interceptor) {		var statistics = MrtModel.getStatisticsForService(interceptor, addMrtToData);	};	$scope.reloadMrtData = function(interceptor) {		var statistics = MrtModel.getStatisticsForService(interceptor, addMrtToData, "Successfully reloaded runtime data");	};		$scope.remove = function(interceptor) {		InterceptorModel.deleteInterceptor(interceptor.id);	};		$scope.toggleInterceptorState = function(interceptor) {		InterceptorModel.toggleInterceptorState(interceptor.id);	};		$scope.refresh = function() {		InterceptorModel.load();	};};wxInterceptorModule.controller("MrtCtrl", MrtCtrl);var MrtModalCtrl = function ($scope, $modal) {		$scope.addMrtInterceptor = function() {		var modalInstance = $modal.open({			templateUrl: 'addMrtInterceptor.html',			controller: AddMrtInterceptorInstanceCtrl,			resolve: {			}		}); 	};	};wxInterceptorModule.controller("MrtModalCtrl", MrtModalCtrl);var AddMrtInterceptorInstanceCtrl = function ($scope, $resource, $modalInstance, InterceptorModel, MrtModel, toaster) {		$scope.mrtInterceptor = {			id: -1,			serviceFqn: ""	};		$scope.ok = function (close) {		var success = addMrtInterceptor();		if( close ) {			$modalInstance.close();		}	};		$scope.cancel = function () {		$modalInstance.dismiss('cancel');	};		var resetMrtInterceptor = function() {		InterceptorModel.load();		$scope.mrtInterceptor = {				id: -1,				serviceFqn: ""		};	}		function addMrtInterceptor() {		MrtModel.addService($scope.mrtInterceptor, resetMrtInterceptor);	};};var AddPredefinedInterceptorModalCtrl = function ($scope, $modal) {		$scope.open = true;	  $scope.addPredefinedInterceptor = function(predefinedInterceptorType, $event) {		var modalInstance = $modal.open({			templateUrl: 'addPredefinedInterceptor.html',			controller: AddPredefinedInterceptorModalInstanceCtrl,			resolve: {				AddInterceptorModel: function(){			          return {predefinedInterceptorType: predefinedInterceptorType};			      }			}		}); 	  };	  };wxInterceptorModule.controller("AddPredefinedInterceptorModalCtrl", AddPredefinedInterceptorModalCtrl);var AddPredefinedInterceptorModalInstanceCtrl = function ($scope, $resource, $modalInstance, InterceptorModel, toaster, AddInterceptorModel) {	var modelServiceDetails = [{"type": "savePipeline", "title": "Save Pipeline", desc: "Save the pipeline before and after the service call. The pipeline is stored in IntegrationServer's 'pipeline' folder."},	                           {"type": "measureRuntimeGraph", "title": "Measure Service Runtime as Graph", desc: "Measures the service runtimes of all services which are part of the call graph for this service."},	                           {"type": "measureRuntime", "title": "Measure Service Runtime", desc: "Measures the service runtimes of all services matching the expression. Measurements include min and max runtime, average runtime etc."},	                              {"type": "tracePipeline", "title": "Trace Pipeline", desc: "Trace the pipeline before and after the service call. The traced pipeline is printed into IntegrationServer's server.log."}];		$scope.modelServiceDetail = modelServiceDetails.filter(function( obj ) {		var result = obj.type == AddInterceptorModel.predefinedInterceptorType;		return result	})[0];		$scope.interceptor = {		id: -1,		serviceFqn: ""	};		$scope.type = AddInterceptorModel.predefinedInterceptorType;			$scope.ok = function (close) {		var success = addInterceptor();		if( close ) {			$modalInstance.close();		}	};		$scope.cancel = function () {		$modalInstance.dismiss('cancel');	};		var resetInterceptor = function() {		InterceptorModel.load();		$scope.interceptor = {			id: -1,			serviceFqn: ""		};	}		function addInterceptor() {		InterceptorModel.addPredefinedInterceptor($scope.interceptor, AddInterceptorModel.predefinedInterceptorType, resetInterceptor);	};};var MrtStatisticsCtrl = function($scope, MrtModel, InterceptorModel, toaster) {		$scope.MrtModel = MrtModel;	$scope.InterceptorModel = InterceptorModel;	$scope.statisticsData = [].concat(MrtModel.data);		var loadData = function() {		MrtModel.getStatistics();	}		loadData();		$scope.reloadStatistics = function() {		loadData();	};		$scope.resetStatistics = function(interceptor) {		MrtModel.resetStatistics();	};	};wxInterceptorModule.controller("MrtStatisticsCtrl", MrtStatisticsCtrl);wxInterceptorModule.factory('MrtGraphResource', function($resource) {	var MrtResource = $resource( '/rest/wx/interceptor/restServices/measureRuntimeGraph/statistics/', 		{}, {			get: { 				method: 'get', 				isArray: true			} 		}	);	return MrtResource;});wxInterceptorModule.service('MrtGraphModel', function(MrtGraphResource, toaster) {	var MrtGraph =  function() {		this.data = [{		              serviceName: null, 		              statistics: {		            	  min: -1, 		            	  max: -1, 		            	  variance: -1, 		            	  sum: -1,		            	  avg: -1,		            	  stdDev: -1,		            	  invocations: -1},		               children: []		}];				this.timeunits  = [{"name":"milliseconds", "divider": 1000000},		                   {"name":"microseconds", "divider":  1000},		                   {"name":"nanoseconds", "divider":  1}];		this.selectedTimeunit = 1000000;	};	MrtGraph.prototype.getStatistics = function() {		var self = this;		console.log("getting graph statistics");		MrtGraphResource.get({}, {}, function(successData) {			toaster.pop("success", "Successfully reloaded graph statistics");			self.data = successData;		}, function(errorData) {			toaster.pop("error", "An error occured when getting the graph statics: " + errorData.status.msg);			console.log("An error occured when getting the graph statics: " + errorData.status.msg);		});	};	MrtGraph.prototype.resetStatistics = function() {		var self = this;		console.log("resetting statistics");		MrtGraphResource.delete({}, {}, function(successData) {			toaster.pop("success", "Successfully resetted all statistics");			self.data = [];		}, function(errorData) {			toaster.pop("error", "An error occured when resetting the statics: " + errorData.status.msg);			console.log("An error occured when resetting the statics: " + errorData.status.msg);		});	};		MrtGraph.prototype.addService = function(interceptor, callback) {		var self = this;		MrtGraphResource.save({}, {interceptor}, function(successData) {			console.log("put MRT Service response: " + successData.status);			callback();			toaster.pop("success", "Service " + id + " was successfully added to measurement");		}, function(errorData) {			toaster.pop("error", "Error when adding service to measurement: " + errorData);		});	};		return new MrtGraph();});var MrtGraphCtrl = function($scope, MrtGraphModel, InterceptorModel, toaster, InterceptorModel) {	$scope.MrtGraphModel = MrtGraphModel;	$scope.InterceptorModel = InterceptorModel;	$scope.statisticsData = [].concat(MrtGraphModel.data);	 $scope.mrtGraphOpts = {         equality: function(node1, node2) {             return node1 === node2;         },         injectClasses: {//        	 "iLeaf": "c-iLeaf",        	 "iExpanded": "c-iexpanded",             "iCollapsed": "c-icollapsed"         }     };	    $scope.lastClicked = null;    $scope.buttonClick = function($event, node) {        $scope.lastClicked = node;        $event.stopPropagation();    }    $scope.showSelected = function(sel) {        $scope.selectedNode = sel;    };    		var loadData = function() {		MrtGraphModel.getStatistics();	};	loadData();		$scope.reloadStatistics = function() {		loadData();	};		$scope.resetStatistics = function(interceptor) {		MrtGraphModel.resetStatistics();	};	$scope.expandAll = function() {		if( $scope.expandedNodes == undefined ) {			$scope.expandedNodes = [];		}		$scope.expandedNodes.length = 0;		for( var i=0; i<$scope.MrtGraphModel.data.length; i++ ) {			$scope.selected = $scope.MrtGraphModel.data[i];			doExpandAll($scope.MrtGraphModel.data[i]);		}	}		function doExpandAll(obj) {		$scope.expandedNodes.push(obj);		if( obj.children !== null ) {			for( var k=0; k<obj.children.length; k++ ) {				doExpandAll(obj.children[k]);			}		}	}        $scope.addMrtGraphInterceptor = function(serviceName) {    	InterceptorModel.addPredefinedInterceptor({serviceFqn: serviceName}, "measureRuntimeGraph", function() {});    }	};wxInterceptorModule.controller("MrtGraphCtrl", MrtGraphCtrl);